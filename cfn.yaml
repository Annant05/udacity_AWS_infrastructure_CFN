AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  Template for deploying simple infrastructure with LB, AutoScaling, 
  Health check, SG, Listener and Target Group  for Udacity Project.

Parameters:
  BastionKeyPair:
    Description: Select the key pair for the Bastion host.
    Type: AWS::EC2::KeyPair::KeyName
    Default: bastion-host
    

Mappings:
  RegionMap:
    us-east-1:
      AMI: "ami-07ebfd5b3428b6f4d"

Resources:
  # add one launch config
  # add one VPC
  # add one Subnet
  # add one security group
  # add one autoscalig group
  # add one elastic load balancer
  # add one target group

  # VPC
  InfraVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.10.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: InfraVPC

  InternetGatewayVPC:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InternetGatewayVPC

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGatewayVPC
      VpcId: !Ref InfraVPC

  PublicIGWRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGatewayVPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref InfraVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicSub1RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1 #required

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref InfraVPC
      CidrBlock: 10.10.1.0/24
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSub2RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref InfraVPC
      CidrBlock: 10.10.2.0/24
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: PublicSubnet2

  NatEIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
      # PublicIpv4Pool: String
      Tags:
        - Key: Name
          Value: NatEIP

  NatGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId #required
      SubnetId: !Ref PublicSubnet1 #required
      Tags:
        - Key: Name
          Value: NatGateway

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref InfraVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  PrivateSub1RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref InfraVPC
      CidrBlock: 10.10.3.0/24
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  PrivateSub2RT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref InfraVPC
      CidrBlock: 10.10.4.0/24
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  SGAllowHTTP:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref InfraVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: SGAllowHTTP

  SGAllowSSH:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH to client host
      VpcId: !Ref InfraVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !GetAtt BastionSGAllowSSH.GroupId
      Tags:
        - Key: Name
          Value: SGAllowSSH

  # bastion host
  BastionHostInstance:
    Type: AWS::EC2::Instance
    DependsOn: [InfraVPC]
    Properties:
      KeyName: !Ref BastionKeyPair #bastion-host
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: t3a.micro
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 10
      Monitoring: false
      # SubnetId: !Ref PublicSubnet1
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref BastionSGAllowSSH
          SubnetId:
            Ref: "PublicSubnet1"
      # SecurityGroupIds:
      #   - !Ref BastionSGAllowSSH
      Tags:
        - Key: Name
          Value: Bastion-Host

  BastionSGAllowSSH:
    Type: AWS::EC2::SecurityGroup
    DependsOn: PublicSubnet1
    Properties:
      GroupDescription: Allow SSH to Bastion host
      VpcId: !Ref InfraVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: BastionSGAllowSSH

  # # launch config
  WebSeverLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: InfraVPC
    Properties:
      LaunchConfigurationName: WebSeverLaunchConfig
      # AssociatePublicIpAddress: true
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      # EbsOptimized: true|false
      # InstanceMonitoring: true|false
      InstanceType: t3a.nano
      # KeyName: !Ref WebServerKeyPair #cfn-infra-udacity
      SecurityGroups:
        - !Ref SGAllowHTTP
        - !Ref SGAllowSSH
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 10
      UserData:
        Fn::Base64: |
          #!/bin/bash
          apt update -y
          apt install -y apache2
          cd /var/www/html
          echo "hello Annant" > index.html

  # autoscaling group
  WebAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AutoScalingGroupName: WebAutoScalingGroup
      AvailabilityZones:
        - !Select
          - 0
          - Fn::GetAZs: !Ref "AWS::Region"
        - !Select
          - 1
          - Fn::GetAZs: !Ref "AWS::Region"

        # - "us-east-1a"
        # - "us-east-1b"
      DesiredCapacity: "2"
      HealthCheckGracePeriod: 30
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref WebSeverLaunchConfig
      MaxSize: "4" #required
      MinSize: "2" #required
      # NotificationConfigurations:
      #   - NotificationConfiguration
      Tags:
        - Key: Environment
          Value: Production
          PropagateAtLaunch: true
        - Key: Name
          Value: WebServerGroup
          PropagateAtLaunch: false
      TargetGroupARNs:
        - !Ref WebALBTargetGroup
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  WebServerALB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      IpAddressType: ipv4
      Name: WebServerALB
      Scheme: internet-facing
      SecurityGroups:
        - !Ref SGAllowHTTP
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: WebServerALB
      Type: application

  WebALBTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: "200"
      Name: WebALBTargetGroup
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: WebALBTargetGroup
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref InfraVPC

  WebELBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions: #required
        - Type: "forward"
          TargetGroupArn: !Ref WebALBTargetGroup
      LoadBalancerArn: !Ref WebServerALB #required
      Port: 80 #required
      Protocol: "HTTP" #required

Outputs:
  LoadBalancerDNS:
    Description: Displays the DNS of load balancer.
    Value: !GetAtt WebServerALB.DNSName

  BastionDNS:
    Description: DNS of bastion Host for SSH.
    Value: !GetAtt BastionHostInstance.PublicDnsName

  BastionKeyName:
    Description: SSH key to use for bastion Host.
    Value: !Ref BastionKeyPair
